#include "xparameters.h"
#include "xgpio.h"
#include "xuartps.h"
#include "xil_printf.h"
#include "sleep.h"

#define LED_DEVICE_ID  XPAR_AXI_GPIO_0_DEVICE_ID
#define LED_CHANNEL 1
#define UART_BASEADDR XPAR_PS7_UART_1_BASEADDR  // UART 1

XGpio Gpio;  // GPIO 物件

int main() {
    int status;
    u8 blink_count;   // 闪烁次数
    u8 led_pattern;   // LED 显示模式
    u8 i;

    // 初始化 GPIO
    status = XGpio_Initialize(&Gpio, LED_DEVICE_ID);
    if (status != XST_SUCCESS) {
        xil_printf("GPIO 初始化失败！\n");
        return XST_FAILURE;
    }

    XGpio_SetDataDirection(&Gpio, LED_CHANNEL, 0x00); // 设置 LED 为输出

    // **初始化 LED 全亮**
    XGpio_DiscreteWrite(&Gpio, LED_CHANNEL, 0xFF);
    xil_printf("LED 初始状态: 全亮 (0xFF)\n");

    while (1) {
        xil_printf("\n请输入闪烁次数 (0~255): ");
        blink_count = XUartPs_RecvByte(UART_BASEADDR); // 读取闪烁次数
        xil_printf("闪烁次数: %d\n", blink_count);

        xil_printf("请输入 LED 显示模式 (0x00 ~ 0xFF): ");
        // 读取 LED 模式的十六进制输入
        led_pattern = XUartPs_RecvByte(UART_BASEADDR);
        xil_printf("LED 显示模式: 0x%02X\n", led_pattern);

        xil_printf("\n开始闪烁 %d 次...\n", blink_count);

        for (i = 0; i < blink_count; i++) {
            XGpio_DiscreteWrite(&Gpio, LED_CHANNEL, led_pattern);
            usleep(500000);  // 延迟 0.5 秒
            XGpio_DiscreteWrite(&Gpio, LED_CHANNEL, 0x00);  // 关闭 LED
            usleep(500000);  // 延迟 0.5 秒
        }

        // **闪烁结束，恢复全亮**
        XGpio_DiscreteWrite(&Gpio, LED_CHANNEL, 0xFF);
        xil_printf("闪烁结束，LED 恢复全亮 (0xFF)\n");
    }

    return 0;
}
